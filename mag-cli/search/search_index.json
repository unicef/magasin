{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mag-CLI reference documentation","text":"<p>Welcome to the reference documentation for the command line interface (CLI) of magasin. </p> <p>mac-cli is a very useful tool for system administrators that are managing a magasin instance. It provides shortcuts for common sys admin functions.</p> <p>Mag-cli is written in python and uses click as core framework for building the interface.</p> <p>Note</p> <p>This documentation is meant to be consumed by developers. </p> <p>Generally you'll install mag-cli together with an instance of magasin. But if you need to install mag-cli as standalone utility  just run:</p> <p><pre><code>pip install mag-cli\n</code></pre> You have examples on how to use the command line in magasin's overall getting started.</p> <p>Learn more about magasin:</p> <ul> <li>What is magasin</li> <li>Magasin Docs</li> <li>Contributing</li> </ul>"},{"location":"#intro-to-code-structure","title":"Intro to code structure","text":"<p>mag-cli is based on click a python package for creating command line interfaces in a composable way with as little code as necessary. Having some knowledge on how click works will ease the trip to understand mag-cli.</p> <p>Mag-cli has been though to be modular so that, as magasin components grow, mag-cli can also grow. The idea behind this modularity is founded in the loosely-coupled architecture.</p> <p>The code has a main core module mag_core that has common and shared functionality across modules, and sets the scaffolding of the CLI. For example it enables '--version' to display the version of the CLI.</p> <p>Then each magasin component has its own module that corresponds to one of the first level commands (<code>mag &lt;first-level-command&gt;</code>). For example, for Apache Superset, the <code>mag_superset</code> module enables all commands under <code>mag superset</code></p> <pre><code>$ mag superset \n\nUsage: mag superset [OPTIONS] COMMAND [ARGS]...\n\n  Apache Superset commands\n\nOptions:\n  -r, --realm TEXT  magasin realm  [default:\n                    magasin]\n  --help            Show this message and exit.\n\nCommands:\n  ui  Launch Superset user interface\n</code></pre>"},{"location":"mag_core/","title":"mag_core module","text":""},{"location":"mag_core/#mag.mag_core.realm","title":"<code>realm = click.option('-r', '--realm', default='magasin', show_default=True, help='magasin realm', callback=validate_realm_callback)</code>  <code>module-attribute</code>","text":"<p>Adds the --realm option.</p>"},{"location":"mag_core/#mag.mag_core.forward_port","title":"<code>forward_port(realm, component, service_name, ports, verbose=False)</code>","text":"<p>Forward ports for the specified realm, component, and service name.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>A string representing the realm.</p> required <code>component</code> <code>str</code> <p>A string representing the component.</p> required <code>service_name</code> <code>str</code> <p>(str) A string representing the service name. The service name can be obtained using kubectl get services --namespace magasin-superset).</p> required <code>ports</code> <code>str</code> <p>A string representing the ports to be forwarded (example: \"8000:8000\").</p> required <code>verbose</code> <code>bool</code> <p>A boolean indicating whether to enable verbose mode (default is False).</p> <code>False</code> <p>Returns: None</p> <p>Usage:</p> <p>forward_port(realm, component, service_name, ports, verbose)</p> <p>Example: <pre><code># Given this\nkubectl get service -n magasin-superset\nNAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nsuperset                  ClusterIP   10.100.96.47     &lt;none&gt;        8088/TCP   7d22h\n</code></pre> You can forward this service <pre><code>forward_port(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Assumes the port_forward_command function is defined elsewhere in the code.</li> <li>Uses subprocess.Popen to launch the port forwarding command in a subprocess.</li> <li>Registers the terminate_process function using atexit.register, ensuring that the port forwarding process   is terminated when the script exits.</li> </ul> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def forward_port(realm: str, component: str, service_name: str, ports: str, verbose=False) -&gt; None:\n    \"\"\"\n    Forward ports for the specified realm, component, and service name.\n\n    Args:\n        realm (str): A string representing the realm.\n        component (str): A string representing the component.\n        service_name: (str) A string representing the service name. The service name can be obtained using kubectl get services --namespace magasin-superset).\n        ports (str): A string representing the ports to be forwarded (example: \"8000:8000\").\n        verbose (bool): A boolean indicating whether to enable verbose mode (default is False).\n\n    Returns:\n    None\n\n    Usage:\n\n    forward_port(realm, component, service_name, ports, verbose)\n\n    Example:\n    ```\n    # Given this\n    kubectl get service -n magasin-superset\n    NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\n    superset                  ClusterIP   10.100.96.47     &lt;none&gt;        8088/TCP   7d22h\n    ```\n    You can forward this service\n    ```\n    forward_port(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n    ```\n\n    Notes:\n\n    - Assumes the port_forward_command function is defined elsewhere in the code.\n    - Uses subprocess.Popen to launch the port forwarding command in a subprocess.\n    - Registers the terminate_process function using atexit.register, ensuring that the port forwarding process\n      is terminated when the script exits.\n    \"\"\"\n    port_forward_command = port_forward_command_arr(\n        realm, component, service_name, ports, verbose)\n    click.echo(\"forward_port command: \" + \" \".join(port_forward_command))\n    process = subprocess.Popen(port_forward_command, shell=False)\n\n    local, _ = split_ports(ports)\n    click.echo(\"Waiting for port to be open...\")\n    if not is_port_open(host='localhost', port=local):\n        click.echo(\"Port could not be opened.\")\n        exit(-1)\n    click.echo(\"Port ready.\")\n\n    atexit.register(terminate_process, process)\n</code></pre>"},{"location":"mag_core/#mag.mag_core.generate_random_string","title":"<code>generate_random_string(length=7)</code>","text":"<p>Generate a random alphanumeric lowercase string of a specified length.</p> <p>Parameters: - length (int): The desired length of the random string.</p> <p>Returns: - str: A random string containing letters (both lowercase and uppercase) and digits.</p> Source code in <code>mag/mag_core/random.py</code> <pre><code>def generate_random_string(length=7):\n    \"\"\"\n    Generate a random alphanumeric lowercase string of a specified length.\n\n    Parameters:\n    - length (int): The desired length of the random string.\n\n    Returns:\n    - str: A random string containing letters (both lowercase and uppercase) and digits.\n    \"\"\"\n    characters = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(characters) for _ in range(length))\n</code></pre>"},{"location":"mag_core/#mag.mag_core.get_namespace","title":"<code>get_namespace(component_name, realm='magasin')</code>","text":"<p>Generate a namespace based on the component name and realm.</p> <p>Parameters:</p> Name Type Description Default <code>component_name</code> <code>str</code> <p>The magasin component name (superset, daskhub, drill, ...)</p> required <code>realm</code> <code>str</code> <p>The realm. Defaults to 'magasin'.</p> <code>'magasin'</code> Example <ul> <li><code>get_namespace(\"superset\", \"magasin\")</code> -&gt; \"magasin-superset\"</li> <li><code>get_namespace(\"superset\", \"magasin-postfix\")</code> -&gt; \"magasin-superset-postfix\"</li> </ul> Reference <p>For more information about magasin realms, please see the magasin realms documentation.</p> Source code in <code>mag/mag_core/realm.py</code> <pre><code>def get_namespace(component_name: str, realm='magasin') -&gt; str:\n    \"\"\"\n    Generate a namespace based on the component name and realm.\n\n\n    Args:\n        component_name (str): The magasin component name (superset, daskhub, drill, ...)\n        realm (str, optional): The realm. Defaults to 'magasin'.\n\n    Example:\n        * `get_namespace(\"superset\", \"magasin\")` -&gt; \"magasin-superset\"\n        * `get_namespace(\"superset\", \"magasin-postfix\")` -&gt; \"magasin-superset-postfix\"\n\n    Reference:\n        For more information about magasin realms, please see the [magasin realms documentation](https://unicef.github.io/magasin/install/advanced.html#magasin-realms).\n    \"\"\"\n    prefix, suffix = split_realm(realm)\n    namespace = \"\"\n    if prefix:\n        namespace = prefix + '-' + component_name\n    if suffix:\n        namespace = namespace + \"-\" + suffix\n    return namespace\n</code></pre>"},{"location":"mag_core/#mag.mag_core.is_port_open","title":"<code>is_port_open(host, port, timeout=15)</code>","text":"<p>Check if a TCP port is open and responding.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>A string representing the host to check. Example: localhost</p> required <code>port</code> <code>int</code> <p>An integer representing the port to check. Example: 8080</p> required <code>timeout</code> <code>int</code> <p>An integer representing the timeout in seconds. Default is 15 seconds.</p> <code>15</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>Indicates whether the port is open and responding.</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def is_port_open(host, port, timeout=15):\n    \"\"\"\n    Check if a TCP port is open and responding.\n\n    Args:\n        host (str): A string representing the host to check. Example: localhost\n        port (int): An integer representing the port to check. Example: 8080\n        timeout (int): An integer representing the timeout in seconds. Default is 15 seconds.\n\n    Returns:\n        bool: Indicates whether the port is open and responding.\n\n    \"\"\"\n    start_time = time.time()\n    while time.time() - start_time &lt; timeout:\n        try:\n            with socket.create_connection((host, port), timeout=1) as _:\n                return True\n        except (socket.timeout, ConnectionRefusedError):\n            time.sleep(1)  # Wait for 1 second before retrying\n        except OSError:\n            return False\n    return False\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch_command","title":"<code>launch_command(realm, component, pod_name, command='/bin/bash')</code>","text":"<p>Launches a command in a Kubernetes pod.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The magasin realm (e.g., magasin).</p> required <code>component</code> <code>str</code> <p>The name of the magasin component.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod.</p> required <code>command</code> <code>str</code> <p>The command to be executed in the pod. Defaults to '/bin/bash'.</p> <code>'/bin/bash'</code> <p>Returns:</p> Type Description <p>None</p> Example <p>launch_command('magasin', 'component_name', 'pod-1', 'ls -l') Running: kubectl exec pod-1 --namespace magasin -ti -- ls -l</p> Note <p>This function uses the <code>kubectl</code> command-line tool to execute a command in a Kubernetes pod. Make sure you have <code>kubectl</code> installed and configured properly before using this function.</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_command(realm: str, component: str, pod_name: str, command: str = '/bin/bash'):\n    \"\"\"\n    Launches a command in a Kubernetes pod.\n\n    Args:\n        realm (str): The magasin realm (e.g., magasin).\n        component (str): The name of the magasin component.\n        pod_name (str): The name of the pod.\n        command (str, optional): The command to be executed in the pod. Defaults to '/bin/bash'.\n\n    Returns:\n        None\n\n    Raises:\n        None\n\n    Example:\n        &gt;&gt;&gt; launch_command('magasin', 'component_name', 'pod-1', 'ls -l')\n        Running: kubectl exec pod-1 --namespace magasin -ti -- ls -l\n        &lt;output of the command&gt;\n\n    Note:\n        This function uses the `kubectl` command-line tool to execute a command in a Kubernetes pod.\n        Make sure you have `kubectl` installed and configured properly before using this function.\n    \"\"\"\n    namespace = get_namespace(component_name=component, realm=realm)\n    user_root = ''\n\n    command = f\"kubectl exec {pod_name} --namespace {namespace} -ti -- {command}\"\n    click.echo(f\"Running: {command}\")\n    subprocess.run(command, shell=True)\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch_ui","title":"<code>launch_ui(realm, component, service_name, ports, protocol='http', verbose=False)</code>","text":"<p>Launches the user interface for a given realm, component, and service.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The realm of the magasin instance.</p> required <code>component</code> <code>str</code> <p>The magasin component (f.i superset, daskhub, drill, ...)</p> required <code>service_name</code> <code>str</code> <p>The name of the kubernetes service to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward, using the format \"local_port:remote_port\".</p> required <code>protocol</code> <code>str</code> <p>The protocol to use (default is \"http\").</p> <code>'http'</code> <code>verbose</code> <code>bool</code> <p>Whether to display verbose output (default is False).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Nothing</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_ui(realm: str, component: str, service_name: str, ports: str, protocol: str = \"http\", verbose=False) -&gt; None:\n    \"\"\"\n    Launches the user interface for a given realm, component, and service.\n\n    Args:\n        realm (str): The realm of the magasin instance.\n        component (str): The magasin component (f.i superset, daskhub, drill, ...)\n        service_name (str): The name of the kubernetes service to forward.\n        ports (str): The ports to forward, using the format \"local_port:remote_port\".\n        protocol (str, optional): The protocol to use (default is \"http\").\n        verbose (bool, optional): Whether to display verbose output (default is False).\n\n    Returns:\n        None: Nothing\n    \"\"\"    \n    forward_port(realm=realm, component=component,\n                 service_name=service_name, ports=ports, verbose=verbose)\n\n    localhost_port, _ = split_ports(ports)\n    url = f\"{protocol}://localhost:{localhost_port}\"\n    click.echo(f\"Open browser at: {url}\")\n    click.launch(url)\n    click.echo(\"launch ui\")\n\n    try:\n        # Wait for user to press Ctrl+C\n        signal.pause()\n    except KeyboardInterrupt:\n        # Handle Ctrl+C: terminate the server and clean up\n        process.terminate()\n        os.waitpid(process.pid, 0)\n        click.echo(\"\\nServer terminated. Exiting.\")\n</code></pre>"},{"location":"mag_core/#mag.mag_core.port_forward_command_arr","title":"<code>port_forward_command_arr(realm, component, service_name, ports, verbose=False)</code>","text":"<p>Generate a command array for port forwarding.</p> <p>This function generates a command array for port forwarding using <code>kubectl</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The magasin realm.</p> required <code>component</code> <code>str</code> <p>The component of the command (f.i superset, daskhub, drill,...).</p> required <code>service_name</code> <code>str</code> <p>The Kubernetes service name to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward. Follows the format \"local_port:remote_port\".</p> required <code>verbose</code> <code>bool</code> <p>Whether to include verbose output. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>The generated command array.</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def port_forward_command_arr(realm: str, component: str, service_name: str, ports: str, verbose=False) -&gt; List:\n    \"\"\"Generate a command array for port forwarding.\n\n    This function generates a command array for port forwarding using `kubectl` command.\n\n    Args:\n        realm (str): The magasin realm.\n        component (str): The component of the command (f.i superset, daskhub, drill,...).\n        service_name (str): The Kubernetes service name to forward.\n        ports (str): The ports to forward. Follows the format \"local_port:remote_port\".\n        verbose (bool, optional): Whether to include verbose output. Defaults to False.\n\n    Returns:\n        List: The generated command array.\n    \"\"\"\n    namespace = get_namespace(component, realm)\n    port_forward_command_arr = [\n        \"kubectl\", \"port-forward\", \"--address=0.0.0.0\", \"--namespace\", namespace, service_name, ports]\n    if verbose:\n        click.echo(\"port_forward_command_arr: \" +\n                   \" \".join(port_forward_command_arr))\n    return port_forward_command_arr\n</code></pre>"},{"location":"mag_core/#mag.mag_core.port_forward_command_str","title":"<code>port_forward_command_str(realm, component, service_name, ports, verbose=False)</code>","text":"<p>Returns a string representation of the port forward command.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The magasin realm.</p> required <code>component</code> <code>str</code> <p>The component of the command (f.i superset, daskhub, drill,...).</p> required <code>service_name</code> <code>str</code> <p>The Kubernetes service name to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward. Follows the format \"local_port:remote_port\".</p> required <code>verbose</code> <code>bool</code> <p>Whether to include verbose output. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The port forward command as a string.</p> <p>Example: <pre><code>port_forward_command_str(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n</code></pre></p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def port_forward_command_str(realm: str, component: str, service_name: str, ports: str, verbose=False) -&gt; str:\n    \"\"\"\n    Returns a string representation of the port forward command.\n\n    Args:\n        realm (str): The magasin realm.\n        component (str): The component of the command (f.i superset, daskhub, drill,...).\n        service_name (str): The Kubernetes service name to forward.\n        ports (str): The ports to forward. Follows the format \"local_port:remote_port\".\n        verbose (bool, optional): Whether to include verbose output. Defaults to False.\n\n    Returns:\n        str: The port forward command as a string.\n\n    Example:\n    ```\n    port_forward_command_str(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n    ```\n\n    \"\"\"\n    return \" \".join(port_forward_command_arr(realm=realm, component=component, service_name=service_name, ports=ports, verbose=verbose))\n</code></pre>"},{"location":"mag_core/#mag.mag_core.ports","title":"<code>ports(default)</code>","text":"<p>Adds the --ports option.</p> <p>Validates the port format.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>str</code> <p>The default value for the option.</p> required <p>Returns:</p> Type Description <p>click.Option: The click option object.</p> Source code in <code>mag/mag_core/options.py</code> <pre><code>def ports(default: str):\n    \"\"\"\n    Adds the --ports option.\n\n    Validates the port format.\n\n    Parameters:\n        default (str): The default value for the option.\n\n    Returns:\n        click.Option: The click option object.\n\n    \"\"\"\n    return click.option('-p', '--ports', \n                        default=default,\n                        show_default=True, \n                        help='Redirection ports. Format &lt;localhost_port&gt;:&lt;pod_port&gt;. Example: 8080:8080', \n                        callback=validate_port_callback)\n</code></pre>"},{"location":"mag_core/#mag.mag_core.split_ports","title":"<code>split_ports(ports)</code>","text":"<p>Split the input string with the format \"number:number\" into localhost and pod port.</p> <p>Args: - ports (str): Input string with the format \"number:number\".</p> <p>Returns: - tuple: A tuple containing localhost and pod port.</p> <p>Raises: - ValueError: If the input string is not in the expected format or if ports are not valid.</p> Source code in <code>mag/mag_core/ports.py</code> <pre><code>def split_ports(ports: str) -&gt; tuple:\n    \"\"\"\n    Split the input string with the format \"number:number\" into localhost and pod port.\n\n    Args:\n    - ports (str): Input string with the format \"number:number\".\n\n    Returns:\n    - tuple: A tuple containing localhost and pod port.\n\n    Raises:\n    - ValueError: If the input string is not in the expected format or if ports are not valid.\n    \"\"\"\n    if not validate_ports(ports):\n        raise ValueError(\"Invalid ports. Port numbers should be between 1 and 65535.\")\n\n    try:\n        localhost, pod_port = map(int, ports.split(':'))\n        return localhost, pod_port\n    except ValueError:\n        raise ValueError(\"Invalid ports format. Expected format: 'number:number'\")\n</code></pre>"},{"location":"mag_core/#mag.mag_core.split_realm","title":"<code>split_realm(realm)</code>","text":"<p>Split the realm into prefix and suffix based on the last occurrence of \"-\".</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The input realm string.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>A tuple containing prefix and suffix.</p> Example <ul> <li>split_realm(\"magasin\") -&gt; (\"magasin\", \"\")</li> <li>split_realm(\"magasin-post\") -&gt; (\"magasin\", \"post\")</li> <li>split_realm(\"magasin-1-post\") -&gt; (\"magasin-1\", \"post\")</li> <li>split_realm(\"dev-magasin-1\") -&gt; (\"dev-magasin\", \"1\")</li> </ul> Reference <p>For more information about magasin realms, please see the magasin realms documentation.</p> Source code in <code>mag/mag_core/realm.py</code> <pre><code>def split_realm(realm: str) -&gt; tuple:\n    \"\"\"\n    Split the realm into prefix and suffix based on the last occurrence of \"-\".\n\n    Args:\n        realm (str): The input realm string.\n\n    Returns:\n        tuple: A tuple containing prefix and suffix.\n\n    Example:\n        * split_realm(\"magasin\") -&gt; (\"magasin\", \"\")\n        * split_realm(\"magasin-post\") -&gt; (\"magasin\", \"post\")\n        * split_realm(\"magasin-1-post\") -&gt; (\"magasin-1\", \"post\")\n        * split_realm(\"dev-magasin-1\") -&gt; (\"dev-magasin\", \"1\")\n\n    Reference:\n        For more information about magasin realms, please see the [magasin realms documentation](https://unicef.github.io/magasin/install/advanced.html#magasin-realms).\n    \"\"\"\n    last_dash_index = realm.rfind(\"-\")\n\n    if last_dash_index == -1:\n        prefix = realm\n        suffix = \"\"\n    else:\n        prefix = realm[:last_dash_index]\n        suffix = realm[last_dash_index + 1:]\n\n    return prefix, suffix\n</code></pre>"},{"location":"mag_core/#mag.mag_core.terminate_process","title":"<code>terminate_process(process)</code>","text":"<p>Terminate the given process if it is running.</p> <p>Parameters: - process: A subprocess.Popen object representing the process to be terminated.</p> <p>Usage: terminate_process(process)</p> <p>Notes:  - If the process is not running or is already terminated, this function returns without taking any action.  - It checks if the process is running (poll() is None) and terminates it using terminate().    It then waits for the process to finish using wait().</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def terminate_process(process):\n    \"\"\"\n    Terminate the given process if it is running.\n\n    Parameters:\n    - process: A subprocess.Popen object representing the process to be terminated.\n\n    Usage:\n    terminate_process(process)\n\n     Notes:\n     - If the process is not running or is already terminated, this function returns without taking any action.\n     - It checks if the process is running (poll() is None) and terminates it using terminate().\n       It then waits for the process to finish using wait().\n     \"\"\"\n\n    if not process:\n        return\n    if process.poll() is None:\n        process.terminate()\n        process.wait()\n</code></pre>"},{"location":"mag_core/#mag.mag_core.validate_pod_name","title":"<code>validate_pod_name(name)</code>","text":"<p>Validates if a Kubernetes pod name is valid according to Kubernetes naming conventions.</p> <p>Parameters: - name (str): The pod name to validate.</p> <p>Returns: - bool: True if the pod name is valid, False otherwise.</p> Source code in <code>mag/mag_core/validators.py</code> <pre><code>def validate_pod_name(name: str) -&gt; bool:\n    \"\"\"\n    Validates if a Kubernetes pod name is valid according to Kubernetes naming conventions.\n\n    Parameters:\n    - name (str): The pod name to validate.\n\n    Returns:\n    - bool: True if the pod name is valid, False otherwise.\n    \"\"\"\n    if not name:\n        return False\n\n    # Pod name must be no more than 253 characters in length\n    if len(name) &gt; 253:\n        return False\n\n    # Pod name must consist of lower case alphanumeric characters, '-' or '.', and\n    # must start and end with an alphanumeric character\n    pattern = re.compile(r'^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$')\n    return bool(pattern.match(name))\n</code></pre>"},{"location":"mag_core/#mag.mag_core.validate_port_callback","title":"<code>validate_port_callback(ctx, param, value)</code>","text":"<p>Click callback to validate the port format It validates the ports using <code>mag_core.validators.validate_ports</code></p> <p>Raises:</p> Type Description <code>BadParameter</code> <p>If port format is not valid</p> Source code in <code>mag/mag_core/options.py</code> <pre><code>def validate_port_callback(ctx, param, value):\n    \"\"\"Click callback to validate the port format\n    It validates the ports using `mag_core.validators.validate_ports`\n\n    Raises:\n        click.BadParameter: If port format is not valid\n    \"\"\"\n    if not validate_ports(value):\n        raise click.BadParameter(\"The format of the ports is number:number. Where number is between 1 and 65535. Example: 80:80\")\n    return value\n</code></pre>"},{"location":"mag_core/#mag.mag_core.validate_ports","title":"<code>validate_ports(ports)</code>","text":"<p>Validate that the ports in the input string are numbers between 1 and 65535.</p> <p>Args: - ports (str): Input string with the format \"number:number\".</p> <p>Returns: - bool: True if the ports are valid, False otherwise.</p> Source code in <code>mag/mag_core/validators.py</code> <pre><code>def validate_ports(ports: str) -&gt; bool:\n    \"\"\"\n    Validate that the ports in the input string are numbers between 1 and 65535.\n\n    Args:\n    - ports (str): Input string with the format \"number:number\".\n\n    Returns:\n    - bool: True if the ports are valid, False otherwise.\n    \"\"\"\n    try:\n        localhost, pod_port = map(int, ports.split(':'))\n        return 1 &lt;= localhost &lt;= 65535 and 1 &lt;= pod_port &lt;= 65535\n    except ValueError:\n        return False\n</code></pre>"},{"location":"mag_core/#mag.mag_core.validate_realm","title":"<code>validate_realm(realm)</code>","text":"<p>Verify if the realm contains only letters, numbers, \"-\", and \"_\".</p> <p>Args: - realm (str): The input realm string.</p> <p>Returns: - bool: True if the realm contains only valid characters, False otherwise.</p> Source code in <code>mag/mag_core/validators.py</code> <pre><code>def validate_realm(realm: str) -&gt; bool:\n    \"\"\"\n    Verify if the realm contains only letters, numbers, \"-\", and \"_\".\n\n    Args:\n    - realm (str): The input realm string.\n\n    Returns:\n    - bool: True if the realm contains only valid characters, False otherwise.\n    \"\"\"\n    # Define a regular expression pattern for valid characters\n    pattern = re.compile(r'^[a-z0-9-]+$')\n\n    # Use re.match to check if the entire string matches the pattern\n    return bool(pattern.match(realm))\n</code></pre>"},{"location":"mag_core/#mag.mag_core.validate_realm_callback","title":"<code>validate_realm_callback(ctx, param, value)</code>","text":"<p>Validates if the realm has a correct value</p> <p>See: https://click.palletsprojects.com/en/8.1.x/options/#callbacks-for-validation</p> <p>Raises:</p> Type Description <code>BadParameter</code> <p>If name is not valid</p> Source code in <code>mag/mag_core/options.py</code> <pre><code>def validate_realm_callback(ctx, param, value):\n    \"\"\"Validates if the realm has a correct value\n\n    See: https://click.palletsprojects.com/en/8.1.x/options/#callbacks-for-validation\n\n    Raises:\n        click.BadParameter: If name is not valid\n    \"\"\"\n    if not validate_realm(value):\n        raise click.BadParameter(\"Realm can only contain letters, numbers and '-'\")\n    return value\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch","title":"<code>launch</code>","text":"<p>This module provides functions for launching and managing services in a  Kubernetes cluster.</p> <p>It includes functions for generating port forwarding commands, checking  if a TCP port is open, forwarding ports, launching user interfaces, and  executing commands in Kubernetes pods.</p>"},{"location":"mag_core/#mag.mag_core.launch.forward_port","title":"<code>forward_port(realm, component, service_name, ports, verbose=False)</code>","text":"<p>Forward ports for the specified realm, component, and service name.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>A string representing the realm.</p> required <code>component</code> <code>str</code> <p>A string representing the component.</p> required <code>service_name</code> <code>str</code> <p>(str) A string representing the service name. The service name can be obtained using kubectl get services --namespace magasin-superset).</p> required <code>ports</code> <code>str</code> <p>A string representing the ports to be forwarded (example: \"8000:8000\").</p> required <code>verbose</code> <code>bool</code> <p>A boolean indicating whether to enable verbose mode (default is False).</p> <code>False</code> <p>Returns: None</p> <p>Usage:</p> <p>forward_port(realm, component, service_name, ports, verbose)</p> <p>Example: <pre><code># Given this\nkubectl get service -n magasin-superset\nNAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nsuperset                  ClusterIP   10.100.96.47     &lt;none&gt;        8088/TCP   7d22h\n</code></pre> You can forward this service <pre><code>forward_port(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Assumes the port_forward_command function is defined elsewhere in the code.</li> <li>Uses subprocess.Popen to launch the port forwarding command in a subprocess.</li> <li>Registers the terminate_process function using atexit.register, ensuring that the port forwarding process   is terminated when the script exits.</li> </ul> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def forward_port(realm: str, component: str, service_name: str, ports: str, verbose=False) -&gt; None:\n    \"\"\"\n    Forward ports for the specified realm, component, and service name.\n\n    Args:\n        realm (str): A string representing the realm.\n        component (str): A string representing the component.\n        service_name: (str) A string representing the service name. The service name can be obtained using kubectl get services --namespace magasin-superset).\n        ports (str): A string representing the ports to be forwarded (example: \"8000:8000\").\n        verbose (bool): A boolean indicating whether to enable verbose mode (default is False).\n\n    Returns:\n    None\n\n    Usage:\n\n    forward_port(realm, component, service_name, ports, verbose)\n\n    Example:\n    ```\n    # Given this\n    kubectl get service -n magasin-superset\n    NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\n    superset                  ClusterIP   10.100.96.47     &lt;none&gt;        8088/TCP   7d22h\n    ```\n    You can forward this service\n    ```\n    forward_port(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n    ```\n\n    Notes:\n\n    - Assumes the port_forward_command function is defined elsewhere in the code.\n    - Uses subprocess.Popen to launch the port forwarding command in a subprocess.\n    - Registers the terminate_process function using atexit.register, ensuring that the port forwarding process\n      is terminated when the script exits.\n    \"\"\"\n    port_forward_command = port_forward_command_arr(\n        realm, component, service_name, ports, verbose)\n    click.echo(\"forward_port command: \" + \" \".join(port_forward_command))\n    process = subprocess.Popen(port_forward_command, shell=False)\n\n    local, _ = split_ports(ports)\n    click.echo(\"Waiting for port to be open...\")\n    if not is_port_open(host='localhost', port=local):\n        click.echo(\"Port could not be opened.\")\n        exit(-1)\n    click.echo(\"Port ready.\")\n\n    atexit.register(terminate_process, process)\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch.is_port_open","title":"<code>is_port_open(host, port, timeout=15)</code>","text":"<p>Check if a TCP port is open and responding.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>A string representing the host to check. Example: localhost</p> required <code>port</code> <code>int</code> <p>An integer representing the port to check. Example: 8080</p> required <code>timeout</code> <code>int</code> <p>An integer representing the timeout in seconds. Default is 15 seconds.</p> <code>15</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>Indicates whether the port is open and responding.</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def is_port_open(host, port, timeout=15):\n    \"\"\"\n    Check if a TCP port is open and responding.\n\n    Args:\n        host (str): A string representing the host to check. Example: localhost\n        port (int): An integer representing the port to check. Example: 8080\n        timeout (int): An integer representing the timeout in seconds. Default is 15 seconds.\n\n    Returns:\n        bool: Indicates whether the port is open and responding.\n\n    \"\"\"\n    start_time = time.time()\n    while time.time() - start_time &lt; timeout:\n        try:\n            with socket.create_connection((host, port), timeout=1) as _:\n                return True\n        except (socket.timeout, ConnectionRefusedError):\n            time.sleep(1)  # Wait for 1 second before retrying\n        except OSError:\n            return False\n    return False\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch.launch_command","title":"<code>launch_command(realm, component, pod_name, command='/bin/bash')</code>","text":"<p>Launches a command in a Kubernetes pod.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The magasin realm (e.g., magasin).</p> required <code>component</code> <code>str</code> <p>The name of the magasin component.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod.</p> required <code>command</code> <code>str</code> <p>The command to be executed in the pod. Defaults to '/bin/bash'.</p> <code>'/bin/bash'</code> <p>Returns:</p> Type Description <p>None</p> Example <p>launch_command('magasin', 'component_name', 'pod-1', 'ls -l') Running: kubectl exec pod-1 --namespace magasin -ti -- ls -l</p> Note <p>This function uses the <code>kubectl</code> command-line tool to execute a command in a Kubernetes pod. Make sure you have <code>kubectl</code> installed and configured properly before using this function.</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_command(realm: str, component: str, pod_name: str, command: str = '/bin/bash'):\n    \"\"\"\n    Launches a command in a Kubernetes pod.\n\n    Args:\n        realm (str): The magasin realm (e.g., magasin).\n        component (str): The name of the magasin component.\n        pod_name (str): The name of the pod.\n        command (str, optional): The command to be executed in the pod. Defaults to '/bin/bash'.\n\n    Returns:\n        None\n\n    Raises:\n        None\n\n    Example:\n        &gt;&gt;&gt; launch_command('magasin', 'component_name', 'pod-1', 'ls -l')\n        Running: kubectl exec pod-1 --namespace magasin -ti -- ls -l\n        &lt;output of the command&gt;\n\n    Note:\n        This function uses the `kubectl` command-line tool to execute a command in a Kubernetes pod.\n        Make sure you have `kubectl` installed and configured properly before using this function.\n    \"\"\"\n    namespace = get_namespace(component_name=component, realm=realm)\n    user_root = ''\n\n    command = f\"kubectl exec {pod_name} --namespace {namespace} -ti -- {command}\"\n    click.echo(f\"Running: {command}\")\n    subprocess.run(command, shell=True)\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch.launch_ui","title":"<code>launch_ui(realm, component, service_name, ports, protocol='http', verbose=False)</code>","text":"<p>Launches the user interface for a given realm, component, and service.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The realm of the magasin instance.</p> required <code>component</code> <code>str</code> <p>The magasin component (f.i superset, daskhub, drill, ...)</p> required <code>service_name</code> <code>str</code> <p>The name of the kubernetes service to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward, using the format \"local_port:remote_port\".</p> required <code>protocol</code> <code>str</code> <p>The protocol to use (default is \"http\").</p> <code>'http'</code> <code>verbose</code> <code>bool</code> <p>Whether to display verbose output (default is False).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Nothing</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_ui(realm: str, component: str, service_name: str, ports: str, protocol: str = \"http\", verbose=False) -&gt; None:\n    \"\"\"\n    Launches the user interface for a given realm, component, and service.\n\n    Args:\n        realm (str): The realm of the magasin instance.\n        component (str): The magasin component (f.i superset, daskhub, drill, ...)\n        service_name (str): The name of the kubernetes service to forward.\n        ports (str): The ports to forward, using the format \"local_port:remote_port\".\n        protocol (str, optional): The protocol to use (default is \"http\").\n        verbose (bool, optional): Whether to display verbose output (default is False).\n\n    Returns:\n        None: Nothing\n    \"\"\"    \n    forward_port(realm=realm, component=component,\n                 service_name=service_name, ports=ports, verbose=verbose)\n\n    localhost_port, _ = split_ports(ports)\n    url = f\"{protocol}://localhost:{localhost_port}\"\n    click.echo(f\"Open browser at: {url}\")\n    click.launch(url)\n    click.echo(\"launch ui\")\n\n    try:\n        # Wait for user to press Ctrl+C\n        signal.pause()\n    except KeyboardInterrupt:\n        # Handle Ctrl+C: terminate the server and clean up\n        process.terminate()\n        os.waitpid(process.pid, 0)\n        click.echo(\"\\nServer terminated. Exiting.\")\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch.port_forward_command_arr","title":"<code>port_forward_command_arr(realm, component, service_name, ports, verbose=False)</code>","text":"<p>Generate a command array for port forwarding.</p> <p>This function generates a command array for port forwarding using <code>kubectl</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The magasin realm.</p> required <code>component</code> <code>str</code> <p>The component of the command (f.i superset, daskhub, drill,...).</p> required <code>service_name</code> <code>str</code> <p>The Kubernetes service name to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward. Follows the format \"local_port:remote_port\".</p> required <code>verbose</code> <code>bool</code> <p>Whether to include verbose output. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>The generated command array.</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def port_forward_command_arr(realm: str, component: str, service_name: str, ports: str, verbose=False) -&gt; List:\n    \"\"\"Generate a command array for port forwarding.\n\n    This function generates a command array for port forwarding using `kubectl` command.\n\n    Args:\n        realm (str): The magasin realm.\n        component (str): The component of the command (f.i superset, daskhub, drill,...).\n        service_name (str): The Kubernetes service name to forward.\n        ports (str): The ports to forward. Follows the format \"local_port:remote_port\".\n        verbose (bool, optional): Whether to include verbose output. Defaults to False.\n\n    Returns:\n        List: The generated command array.\n    \"\"\"\n    namespace = get_namespace(component, realm)\n    port_forward_command_arr = [\n        \"kubectl\", \"port-forward\", \"--address=0.0.0.0\", \"--namespace\", namespace, service_name, ports]\n    if verbose:\n        click.echo(\"port_forward_command_arr: \" +\n                   \" \".join(port_forward_command_arr))\n    return port_forward_command_arr\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch.port_forward_command_str","title":"<code>port_forward_command_str(realm, component, service_name, ports, verbose=False)</code>","text":"<p>Returns a string representation of the port forward command.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The magasin realm.</p> required <code>component</code> <code>str</code> <p>The component of the command (f.i superset, daskhub, drill,...).</p> required <code>service_name</code> <code>str</code> <p>The Kubernetes service name to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward. Follows the format \"local_port:remote_port\".</p> required <code>verbose</code> <code>bool</code> <p>Whether to include verbose output. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The port forward command as a string.</p> <p>Example: <pre><code>port_forward_command_str(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n</code></pre></p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def port_forward_command_str(realm: str, component: str, service_name: str, ports: str, verbose=False) -&gt; str:\n    \"\"\"\n    Returns a string representation of the port forward command.\n\n    Args:\n        realm (str): The magasin realm.\n        component (str): The component of the command (f.i superset, daskhub, drill,...).\n        service_name (str): The Kubernetes service name to forward.\n        ports (str): The ports to forward. Follows the format \"local_port:remote_port\".\n        verbose (bool, optional): Whether to include verbose output. Defaults to False.\n\n    Returns:\n        str: The port forward command as a string.\n\n    Example:\n    ```\n    port_forward_command_str(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n    ```\n\n    \"\"\"\n    return \" \".join(port_forward_command_arr(realm=realm, component=component, service_name=service_name, ports=ports, verbose=verbose))\n</code></pre>"},{"location":"mag_core/#mag.mag_core.launch.terminate_process","title":"<code>terminate_process(process)</code>","text":"<p>Terminate the given process if it is running.</p> <p>Parameters: - process: A subprocess.Popen object representing the process to be terminated.</p> <p>Usage: terminate_process(process)</p> <p>Notes:  - If the process is not running or is already terminated, this function returns without taking any action.  - It checks if the process is running (poll() is None) and terminates it using terminate().    It then waits for the process to finish using wait().</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def terminate_process(process):\n    \"\"\"\n    Terminate the given process if it is running.\n\n    Parameters:\n    - process: A subprocess.Popen object representing the process to be terminated.\n\n    Usage:\n    terminate_process(process)\n\n     Notes:\n     - If the process is not running or is already terminated, this function returns without taking any action.\n     - It checks if the process is running (poll() is None) and terminates it using terminate().\n       It then waits for the process to finish using wait().\n     \"\"\"\n\n    if not process:\n        return\n    if process.poll() is None:\n        process.terminate()\n        process.wait()\n</code></pre>"},{"location":"mag_core/#mag.mag_core.options","title":"<code>options</code>","text":"<p>Reusable command line options</p> <p>These are options that can be included in a command and that can be reused in multiple commands</p> <p>Example: </p> <p>Add the --realm  option. The realm is validated against the  allowed format returns errors when is not. <p>```python from mag.mag_core import options</p> <p>@cli.group('drill', cls=ClickAliasedGroup, aliases=['dr']) @options.realm def drill(realm):     printf(realm)</p>"},{"location":"mag_core/#mag.mag_core.options.realm","title":"<code>realm = click.option('-r', '--realm', default='magasin', show_default=True, help='magasin realm', callback=validate_realm_callback)</code>  <code>module-attribute</code>","text":"<p>Adds the --realm option.</p>"},{"location":"mag_core/#mag.mag_core.options.ports","title":"<code>ports(default)</code>","text":"<p>Adds the --ports option.</p> <p>Validates the port format.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>str</code> <p>The default value for the option.</p> required <p>Returns:</p> Type Description <p>click.Option: The click option object.</p> Source code in <code>mag/mag_core/options.py</code> <pre><code>def ports(default: str):\n    \"\"\"\n    Adds the --ports option.\n\n    Validates the port format.\n\n    Parameters:\n        default (str): The default value for the option.\n\n    Returns:\n        click.Option: The click option object.\n\n    \"\"\"\n    return click.option('-p', '--ports', \n                        default=default,\n                        show_default=True, \n                        help='Redirection ports. Format &lt;localhost_port&gt;:&lt;pod_port&gt;. Example: 8080:8080', \n                        callback=validate_port_callback)\n</code></pre>"},{"location":"mag_core/#mag.mag_core.options.validate_port_callback","title":"<code>validate_port_callback(ctx, param, value)</code>","text":"<p>Click callback to validate the port format It validates the ports using <code>mag_core.validators.validate_ports</code></p> <p>Raises:</p> Type Description <code>BadParameter</code> <p>If port format is not valid</p> Source code in <code>mag/mag_core/options.py</code> <pre><code>def validate_port_callback(ctx, param, value):\n    \"\"\"Click callback to validate the port format\n    It validates the ports using `mag_core.validators.validate_ports`\n\n    Raises:\n        click.BadParameter: If port format is not valid\n    \"\"\"\n    if not validate_ports(value):\n        raise click.BadParameter(\"The format of the ports is number:number. Where number is between 1 and 65535. Example: 80:80\")\n    return value\n</code></pre>"},{"location":"mag_core/#mag.mag_core.options.validate_realm_callback","title":"<code>validate_realm_callback(ctx, param, value)</code>","text":"<p>Validates if the realm has a correct value</p> <p>See: https://click.palletsprojects.com/en/8.1.x/options/#callbacks-for-validation</p> <p>Raises:</p> Type Description <code>BadParameter</code> <p>If name is not valid</p> Source code in <code>mag/mag_core/options.py</code> <pre><code>def validate_realm_callback(ctx, param, value):\n    \"\"\"Validates if the realm has a correct value\n\n    See: https://click.palletsprojects.com/en/8.1.x/options/#callbacks-for-validation\n\n    Raises:\n        click.BadParameter: If name is not valid\n    \"\"\"\n    if not validate_realm(value):\n        raise click.BadParameter(\"Realm can only contain letters, numbers and '-'\")\n    return value\n</code></pre>"},{"location":"mag_core/#mag.mag_core.std_aliases","title":"<code>std_aliases</code>","text":"<p>Standard aliases for mag commands.</p> <p>Sometimes it is difficult to remember if it is add, create or new the command. Aliases  provide an</p> <p>Aliases are also useful to help advanced users to work more efficiently.  For example, instead of typing the \"mag minio add bucket mybucket\" command,  you can just type \"mag m a b mybucket\".</p> <p>This package defines some standard aliases which can be used consistently across the whole mag  command line interface</p> <p>Example: </p> <p>from click_aliases import ClickAliasedGroup from mag.mag import cli cli.group('add', cls=ClickAliasedGroup, aliases=std_aliases.add) def add():    pass</p> <p>This enables all these commands to be the same ```sh mag add mag a mag create mag c mag new mag n</p>"},{"location":"mag_core/#mag.mag_core.std_aliases.add","title":"<code>add = ['a', 'create', 'c', 'new', 'n']</code>  <code>module-attribute</code>","text":"<p>add command. Add a new item, create something.</p>"},{"location":"mag_core/#mag.mag_core.std_aliases.shell","title":"<code>shell = ['sh', 'bash', 'console', 'cmd']</code>  <code>module-attribute</code>","text":"<p>shell command. Command line interfaces</p>"},{"location":"mag_core/#mag.mag_core.validators","title":"<code>validators</code>","text":"<p>This module contains functions for validating different inputs  in a magasin application.</p>"},{"location":"mag_core/#mag.mag_core.validators.validate_pod_name","title":"<code>validate_pod_name(name)</code>","text":"<p>Validates if a Kubernetes pod name is valid according to Kubernetes naming conventions.</p> <p>Parameters: - name (str): The pod name to validate.</p> <p>Returns: - bool: True if the pod name is valid, False otherwise.</p> Source code in <code>mag/mag_core/validators.py</code> <pre><code>def validate_pod_name(name: str) -&gt; bool:\n    \"\"\"\n    Validates if a Kubernetes pod name is valid according to Kubernetes naming conventions.\n\n    Parameters:\n    - name (str): The pod name to validate.\n\n    Returns:\n    - bool: True if the pod name is valid, False otherwise.\n    \"\"\"\n    if not name:\n        return False\n\n    # Pod name must be no more than 253 characters in length\n    if len(name) &gt; 253:\n        return False\n\n    # Pod name must consist of lower case alphanumeric characters, '-' or '.', and\n    # must start and end with an alphanumeric character\n    pattern = re.compile(r'^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$')\n    return bool(pattern.match(name))\n</code></pre>"},{"location":"mag_core/#mag.mag_core.validators.validate_ports","title":"<code>validate_ports(ports)</code>","text":"<p>Validate that the ports in the input string are numbers between 1 and 65535.</p> <p>Args: - ports (str): Input string with the format \"number:number\".</p> <p>Returns: - bool: True if the ports are valid, False otherwise.</p> Source code in <code>mag/mag_core/validators.py</code> <pre><code>def validate_ports(ports: str) -&gt; bool:\n    \"\"\"\n    Validate that the ports in the input string are numbers between 1 and 65535.\n\n    Args:\n    - ports (str): Input string with the format \"number:number\".\n\n    Returns:\n    - bool: True if the ports are valid, False otherwise.\n    \"\"\"\n    try:\n        localhost, pod_port = map(int, ports.split(':'))\n        return 1 &lt;= localhost &lt;= 65535 and 1 &lt;= pod_port &lt;= 65535\n    except ValueError:\n        return False\n</code></pre>"},{"location":"mag_core/#mag.mag_core.validators.validate_realm","title":"<code>validate_realm(realm)</code>","text":"<p>Verify if the realm contains only letters, numbers, \"-\", and \"_\".</p> <p>Args: - realm (str): The input realm string.</p> <p>Returns: - bool: True if the realm contains only valid characters, False otherwise.</p> Source code in <code>mag/mag_core/validators.py</code> <pre><code>def validate_realm(realm: str) -&gt; bool:\n    \"\"\"\n    Verify if the realm contains only letters, numbers, \"-\", and \"_\".\n\n    Args:\n    - realm (str): The input realm string.\n\n    Returns:\n    - bool: True if the realm contains only valid characters, False otherwise.\n    \"\"\"\n    # Define a regular expression pattern for valid characters\n    pattern = re.compile(r'^[a-z0-9-]+$')\n\n    # Use re.match to check if the entire string matches the pattern\n    return bool(pattern.match(realm))\n</code></pre>"},{"location":"mag_dagster/","title":"mag_dagster","text":""},{"location":"mag_dagster/#mag_dagster-module","title":"mag_dagster module","text":""},{"location":"mag_dagster/#mag_dagster.cli","title":"<code>cli(ctx, verbose)</code>","text":"<p>magasin client is the glue between magasin components, it makes easier common tasks</p> Source code in <code>mag/mag.py</code> <pre><code>@click.group(cls=ClickAliasedGroup)\n@click.option('-v', '--verbose', count=True)\n@click.option('--version', is_flag=True, callback=print_version,\n              expose_value=False, is_eager=True)\n@click.pass_context\ndef cli(ctx, verbose):\n    \"\"\"magasin client is the glue between magasin components, it makes easier common tasks\"\"\"\n    ctx.ensure_object(dict)\n</code></pre>"},{"location":"mag_dagster/#mag_dagster.dagster","title":"<code>dagster()</code>","text":"<p>Dagster commands</p> Source code in <code>mag_dagster/dagster.py</code> <pre><code>@cli.group(\"dagster\", cls=ClickAliasedGroup, aliases=[\"d\"])\ndef dagster():\n  \"\"\"Dagster commands\"\"\"\n</code></pre>"},{"location":"mag_dagster/#mag_dagster.launch_ui","title":"<code>launch_ui(realm, component, service_name, ports, protocol='http', verbose=False)</code>","text":"<p>Launches the user interface for a given realm, component, and service.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The realm of the magasin instance.</p> required <code>component</code> <code>str</code> <p>The magasin component (f.i superset, daskhub, drill, ...)</p> required <code>service_name</code> <code>str</code> <p>The name of the kubernetes service to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward, using the format \"local_port:remote_port\".</p> required <code>protocol</code> <code>str</code> <p>The protocol to use (default is \"http\").</p> <code>'http'</code> <code>verbose</code> <code>bool</code> <p>Whether to display verbose output (default is False).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Nothing</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_ui(realm: str, component: str, service_name: str, ports: str, protocol: str = \"http\", verbose=False) -&gt; None:\n    \"\"\"\n    Launches the user interface for a given realm, component, and service.\n\n    Args:\n        realm (str): The realm of the magasin instance.\n        component (str): The magasin component (f.i superset, daskhub, drill, ...)\n        service_name (str): The name of the kubernetes service to forward.\n        ports (str): The ports to forward, using the format \"local_port:remote_port\".\n        protocol (str, optional): The protocol to use (default is \"http\").\n        verbose (bool, optional): Whether to display verbose output (default is False).\n\n    Returns:\n        None: Nothing\n    \"\"\"    \n    forward_port(realm=realm, component=component,\n                 service_name=service_name, ports=ports, verbose=verbose)\n\n    localhost_port, _ = split_ports(ports)\n    url = f\"{protocol}://localhost:{localhost_port}\"\n    click.echo(f\"Open browser at: {url}\")\n    click.launch(url)\n    click.echo(\"launch ui\")\n\n    try:\n        # Wait for user to press Ctrl+C\n        signal.pause()\n    except KeyboardInterrupt:\n        # Handle Ctrl+C: terminate the server and clean up\n        process.terminate()\n        os.waitpid(process.pid, 0)\n        click.echo(\"\\nServer terminated. Exiting.\")\n</code></pre>"},{"location":"mag_dagster/#mag_dagster.ui","title":"<code>ui(realm, ports)</code>","text":"<p>Launch dagster UI</p> Source code in <code>mag_dagster/dagster.py</code> <pre><code>@dagster.command(aliases=['user-interface'])\n@options.realm\n@options.ports(default='3000:80')\ndef ui (realm, ports):\n  \"\"\"Launch dagster UI\"\"\"\n  launch_ui(realm=realm, component=COMPONENT,service_name='service/dagster-dagster-webserver', ports=ports)\n</code></pre>"},{"location":"mag_daskhub/","title":"mag_daskhub","text":""},{"location":"mag_daskhub/#mag_daskhub-module","title":"mag_daskhub module","text":""},{"location":"mag_daskhub/#mag_daskhub.cli","title":"<code>cli(ctx, verbose)</code>","text":"<p>magasin client is the glue between magasin components, it makes easier common tasks</p> Source code in <code>mag/mag.py</code> <pre><code>@click.group(cls=ClickAliasedGroup)\n@click.option('-v', '--verbose', count=True)\n@click.option('--version', is_flag=True, callback=print_version,\n              expose_value=False, is_eager=True)\n@click.pass_context\ndef cli(ctx, verbose):\n    \"\"\"magasin client is the glue between magasin components, it makes easier common tasks\"\"\"\n    ctx.ensure_object(dict)\n</code></pre>"},{"location":"mag_daskhub/#mag_daskhub.daskhub","title":"<code>daskhub(realm)</code>","text":"<p>Daskhub/Jupyterhub commands</p> Source code in <code>mag_daskhub/daskhub.py</code> <pre><code>@cli.group('daskhub', cls=ClickAliasedGroup, aliases=['dh'])\n@options.realm\ndef daskhub(realm):\n  \"\"\"Daskhub/Jupyterhub commands\"\"\"\n  namespace = get_namespace(component_name=COMPONENT, realm=realm)\n  click.echo(\"namespace: \" + namespace)\n</code></pre>"},{"location":"mag_daskhub/#mag_daskhub.get_namespace","title":"<code>get_namespace(component_name, realm='magasin')</code>","text":"<p>Generate a namespace based on the component name and realm.</p> <p>Parameters:</p> Name Type Description Default <code>component_name</code> <code>str</code> <p>The magasin component name (superset, daskhub, drill, ...)</p> required <code>realm</code> <code>str</code> <p>The realm. Defaults to 'magasin'.</p> <code>'magasin'</code> Example <ul> <li><code>get_namespace(\"superset\", \"magasin\")</code> -&gt; \"magasin-superset\"</li> <li><code>get_namespace(\"superset\", \"magasin-postfix\")</code> -&gt; \"magasin-superset-postfix\"</li> </ul> Reference <p>For more information about magasin realms, please see the magasin realms documentation.</p> Source code in <code>mag/mag_core/realm.py</code> <pre><code>def get_namespace(component_name: str, realm='magasin') -&gt; str:\n    \"\"\"\n    Generate a namespace based on the component name and realm.\n\n\n    Args:\n        component_name (str): The magasin component name (superset, daskhub, drill, ...)\n        realm (str, optional): The realm. Defaults to 'magasin'.\n\n    Example:\n        * `get_namespace(\"superset\", \"magasin\")` -&gt; \"magasin-superset\"\n        * `get_namespace(\"superset\", \"magasin-postfix\")` -&gt; \"magasin-superset-postfix\"\n\n    Reference:\n        For more information about magasin realms, please see the [magasin realms documentation](https://unicef.github.io/magasin/install/advanced.html#magasin-realms).\n    \"\"\"\n    prefix, suffix = split_realm(realm)\n    namespace = \"\"\n    if prefix:\n        namespace = prefix + '-' + component_name\n    if suffix:\n        namespace = namespace + \"-\" + suffix\n    return namespace\n</code></pre>"},{"location":"mag_daskhub/#mag_daskhub.launch_ui","title":"<code>launch_ui(realm, component, service_name, ports, protocol='http', verbose=False)</code>","text":"<p>Launches the user interface for a given realm, component, and service.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The realm of the magasin instance.</p> required <code>component</code> <code>str</code> <p>The magasin component (f.i superset, daskhub, drill, ...)</p> required <code>service_name</code> <code>str</code> <p>The name of the kubernetes service to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward, using the format \"local_port:remote_port\".</p> required <code>protocol</code> <code>str</code> <p>The protocol to use (default is \"http\").</p> <code>'http'</code> <code>verbose</code> <code>bool</code> <p>Whether to display verbose output (default is False).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Nothing</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_ui(realm: str, component: str, service_name: str, ports: str, protocol: str = \"http\", verbose=False) -&gt; None:\n    \"\"\"\n    Launches the user interface for a given realm, component, and service.\n\n    Args:\n        realm (str): The realm of the magasin instance.\n        component (str): The magasin component (f.i superset, daskhub, drill, ...)\n        service_name (str): The name of the kubernetes service to forward.\n        ports (str): The ports to forward, using the format \"local_port:remote_port\".\n        protocol (str, optional): The protocol to use (default is \"http\").\n        verbose (bool, optional): Whether to display verbose output (default is False).\n\n    Returns:\n        None: Nothing\n    \"\"\"    \n    forward_port(realm=realm, component=component,\n                 service_name=service_name, ports=ports, verbose=verbose)\n\n    localhost_port, _ = split_ports(ports)\n    url = f\"{protocol}://localhost:{localhost_port}\"\n    click.echo(f\"Open browser at: {url}\")\n    click.launch(url)\n    click.echo(\"launch ui\")\n\n    try:\n        # Wait for user to press Ctrl+C\n        signal.pause()\n    except KeyboardInterrupt:\n        # Handle Ctrl+C: terminate the server and clean up\n        process.terminate()\n        os.waitpid(process.pid, 0)\n        click.echo(\"\\nServer terminated. Exiting.\")\n</code></pre>"},{"location":"mag_daskhub/#mag_daskhub.ui","title":"<code>ui(realm, ports)</code>","text":"<p>Launch jupyterhub user interface</p> Source code in <code>mag_daskhub/daskhub.py</code> <pre><code>@daskhub.command()\n@options.realm\n@options.ports(default=\"8001:80\")\ndef ui(realm, ports):\n  \"\"\"Launch jupyterhub user interface\"\"\"\n  launch_ui(realm=realm,component=COMPONENT, service_name='service/proxy-public', ports=ports)\n</code></pre>"},{"location":"mag_drill/","title":"mag_drill","text":""},{"location":"mag_drill/#mag_drill_1","title":"mag_drill","text":""},{"location":"mag_drill/#mag_drill.add","title":"<code>add()</code>","text":"<p>Add items to Drill</p> Source code in <code>mag_drill/drill.py</code> <pre><code>@drill.group('add', cls=ClickAliasedGroup, aliases=std_aliases.add)\ndef add():\n  \"\"\"Add items to Drill\"\"\"\n</code></pre>"},{"location":"mag_drill/#mag_drill.cli","title":"<code>cli(ctx, verbose)</code>","text":"<p>magasin client is the glue between magasin components, it makes easier common tasks</p> Source code in <code>mag/mag.py</code> <pre><code>@click.group(cls=ClickAliasedGroup)\n@click.option('-v', '--verbose', count=True)\n@click.option('--version', is_flag=True, callback=print_version,\n              expose_value=False, is_eager=True)\n@click.pass_context\ndef cli(ctx, verbose):\n    \"\"\"magasin client is the glue between magasin components, it makes easier common tasks\"\"\"\n    ctx.ensure_object(dict)\n</code></pre>"},{"location":"mag_drill/#mag_drill.drill","title":"<code>drill(realm)</code>","text":"<p>Apache Drill commands</p> Source code in <code>mag_drill/drill.py</code> <pre><code>@cli.group('drill', cls=ClickAliasedGroup, aliases=['dr'])\n@options.realm\ndef drill(realm):\n  \"\"\"Apache Drill commands\"\"\"\n</code></pre>"},{"location":"mag_drill/#mag_drill.launch_command","title":"<code>launch_command(realm, component, pod_name, command='/bin/bash')</code>","text":"<p>Launches a command in a Kubernetes pod.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The magasin realm (e.g., magasin).</p> required <code>component</code> <code>str</code> <p>The name of the magasin component.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod.</p> required <code>command</code> <code>str</code> <p>The command to be executed in the pod. Defaults to '/bin/bash'.</p> <code>'/bin/bash'</code> <p>Returns:</p> Type Description <p>None</p> Example <p>launch_command('magasin', 'component_name', 'pod-1', 'ls -l') Running: kubectl exec pod-1 --namespace magasin -ti -- ls -l</p> Note <p>This function uses the <code>kubectl</code> command-line tool to execute a command in a Kubernetes pod. Make sure you have <code>kubectl</code> installed and configured properly before using this function.</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_command(realm: str, component: str, pod_name: str, command: str = '/bin/bash'):\n    \"\"\"\n    Launches a command in a Kubernetes pod.\n\n    Args:\n        realm (str): The magasin realm (e.g., magasin).\n        component (str): The name of the magasin component.\n        pod_name (str): The name of the pod.\n        command (str, optional): The command to be executed in the pod. Defaults to '/bin/bash'.\n\n    Returns:\n        None\n\n    Raises:\n        None\n\n    Example:\n        &gt;&gt;&gt; launch_command('magasin', 'component_name', 'pod-1', 'ls -l')\n        Running: kubectl exec pod-1 --namespace magasin -ti -- ls -l\n        &lt;output of the command&gt;\n\n    Note:\n        This function uses the `kubectl` command-line tool to execute a command in a Kubernetes pod.\n        Make sure you have `kubectl` installed and configured properly before using this function.\n    \"\"\"\n    namespace = get_namespace(component_name=component, realm=realm)\n    user_root = ''\n\n    command = f\"kubectl exec {pod_name} --namespace {namespace} -ti -- {command}\"\n    click.echo(f\"Running: {command}\")\n    subprocess.run(command, shell=True)\n</code></pre>"},{"location":"mag_drill/#mag_drill.launch_ui","title":"<code>launch_ui(realm, component, service_name, ports, protocol='http', verbose=False)</code>","text":"<p>Launches the user interface for a given realm, component, and service.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The realm of the magasin instance.</p> required <code>component</code> <code>str</code> <p>The magasin component (f.i superset, daskhub, drill, ...)</p> required <code>service_name</code> <code>str</code> <p>The name of the kubernetes service to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward, using the format \"local_port:remote_port\".</p> required <code>protocol</code> <code>str</code> <p>The protocol to use (default is \"http\").</p> <code>'http'</code> <code>verbose</code> <code>bool</code> <p>Whether to display verbose output (default is False).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Nothing</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_ui(realm: str, component: str, service_name: str, ports: str, protocol: str = \"http\", verbose=False) -&gt; None:\n    \"\"\"\n    Launches the user interface for a given realm, component, and service.\n\n    Args:\n        realm (str): The realm of the magasin instance.\n        component (str): The magasin component (f.i superset, daskhub, drill, ...)\n        service_name (str): The name of the kubernetes service to forward.\n        ports (str): The ports to forward, using the format \"local_port:remote_port\".\n        protocol (str, optional): The protocol to use (default is \"http\").\n        verbose (bool, optional): Whether to display verbose output (default is False).\n\n    Returns:\n        None: Nothing\n    \"\"\"    \n    forward_port(realm=realm, component=component,\n                 service_name=service_name, ports=ports, verbose=verbose)\n\n    localhost_port, _ = split_ports(ports)\n    url = f\"{protocol}://localhost:{localhost_port}\"\n    click.echo(f\"Open browser at: {url}\")\n    click.launch(url)\n    click.echo(\"launch ui\")\n\n    try:\n        # Wait for user to press Ctrl+C\n        signal.pause()\n    except KeyboardInterrupt:\n        # Handle Ctrl+C: terminate the server and clean up\n        process.terminate()\n        os.waitpid(process.pid, 0)\n        click.echo(\"\\nServer terminated. Exiting.\")\n</code></pre>"},{"location":"mag_drill/#mag_drill.shell","title":"<code>shell(realm, pod_name)</code>","text":"<p>Launch a shell</p> Source code in <code>mag_drill/drill.py</code> <pre><code>@drill.command(aliases=std_aliases.shell)\n@options.realm\n@click.option('-n', '--pod-name', help='name of the pod to open the shell', default='drillbit-0', show_default=True, callback=validate_pod_name_callback)\ndef shell(realm, pod_name):\n  \"\"\"Launch a shell\"\"\"\n  launch_command(realm=realm, component=COMPONENT, pod_name=pod_name )\n</code></pre>"},{"location":"mag_drill/#mag_drill.store","title":"<code>store(realm, endpoint, bucket, access_key, secret_key, ports)</code>","text":"<p>Add MinIO/s3 store</p> Source code in <code>mag_drill/drill.py</code> <pre><code>@add.command\n@options.realm\n@options.ports(default=\"8047:8047\")\n@click.option('-e', '--endpoint', help='MinIO API Endpoint', default='')\n@click.option('-b', '--bucket', help='Bucket')\n@click.option('-a', '--access-key', help='Access key / username')\n@click.option('-s', '--secret-key', help='Secret key / password')\ndef store(realm, endpoint, bucket, access_key, secret_key, ports):\n  \"\"\"Add MinIO/s3 store \"\"\"\n  click.echo(\"Add Minio Store\")\n  if (endpoint == \"\"):\n    # Use the standard for the realm \n    print(\"hola\")\n</code></pre>"},{"location":"mag_drill/#mag_drill.ui","title":"<code>ui(realm, ports)</code>","text":"<p>Launch Drill user interface</p> Source code in <code>mag_drill/drill.py</code> <pre><code>@drill.command\n@options.realm\n@options.ports(default=\"8047:8047\")\ndef ui(realm, ports):\n  \"\"\"Launch Drill user interface\"\"\"\n  launch_ui(realm, component=COMPONENT, service_name=f\"service/drill-service\", ports=ports, protocol=\"http\")\n</code></pre>"},{"location":"mag_drill/#mag_drill.validate_pod_name","title":"<code>validate_pod_name(name)</code>","text":"<p>Validates if a Kubernetes pod name is valid according to Kubernetes naming conventions.</p> <p>Parameters: - name (str): The pod name to validate.</p> <p>Returns: - bool: True if the pod name is valid, False otherwise.</p> Source code in <code>mag/mag_core/validators.py</code> <pre><code>def validate_pod_name(name: str) -&gt; bool:\n    \"\"\"\n    Validates if a Kubernetes pod name is valid according to Kubernetes naming conventions.\n\n    Parameters:\n    - name (str): The pod name to validate.\n\n    Returns:\n    - bool: True if the pod name is valid, False otherwise.\n    \"\"\"\n    if not name:\n        return False\n\n    # Pod name must be no more than 253 characters in length\n    if len(name) &gt; 253:\n        return False\n\n    # Pod name must consist of lower case alphanumeric characters, '-' or '.', and\n    # must start and end with an alphanumeric character\n    pattern = re.compile(r'^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$')\n    return bool(pattern.match(name))\n</code></pre>"},{"location":"mag_drill/#mag_drill.validate_pod_name_callback","title":"<code>validate_pod_name_callback(ctx, param, value)</code>","text":"<p>Validates if the pod_name argument has a valid value    See: https://click.palletsprojects.com/en/8.1.x/options/#callbacks-for-validation Raises:     click.BadParameter: If does</p> Source code in <code>mag_drill/drill.py</code> <pre><code>def validate_pod_name_callback(ctx, param, value):\n  \"\"\"Validates if the pod_name argument has a valid value\n     See: https://click.palletsprojects.com/en/8.1.x/options/#callbacks-for-validation\n  Raises:\n      click.BadParameter: If does \n  \"\"\"\n  if not validate_pod_name(value):\n      raise click.BadParameter(\"Podname can only contain letters, numbers, '-' and '.'. Must start and end with an alphanumeric character.\")\n  return value\n</code></pre>"},{"location":"mag_minio/","title":"mag_minio","text":""},{"location":"mag_minio/#mag_minio_1","title":"mag_minio","text":""},{"location":"mag_minio/#mag_minio.alias","title":"<code>alias()</code>","text":"<p>-a, --alias</p> Source code in <code>mag_minio/minio_options.py</code> <pre><code>def alias():\n  \"\"\"-a, --alias\"\"\"\n  return click.option('-a', '--alias', default=\"myminio\", \n                     show_default=True, \n                     help='alias name. To see the list run `mc alias list`.', \n                     callback=validate_tenant_callback)\n</code></pre>"},{"location":"mag_minio/#mag_minio.api","title":"<code>api(realm, tenant, ports)</code>","text":"<p>Launch minio server API. Launch this to be able to use mc command.</p> Source code in <code>mag_minio/minio.py</code> <pre><code>@minio.command\n@options.realm\n@options.ports(default=\"9000:9000\")\n@minio_options.tenant()\ndef api(realm, tenant, ports):\n  \"\"\"Launch minio server API. Launch this to be able to use mc command.\"\"\"\n  click.echo(\"\")\n  launch_hl(realm=realm, tenant=tenant, ports=ports, wait=True)\n</code></pre>"},{"location":"mag_minio/#mag_minio.bucket","title":"<code>bucket(realm, tenant, alias, ports, bucket_name)</code>","text":"<p>Create a minio bucket in the tenant</p> Source code in <code>mag_minio/minio.py</code> <pre><code>@add.command(aliases=[\"b\"])\n@options.realm\n@options.ports(default=\"9000:9000\")\n@minio_options.tenant()\n@minio_options.alias()\n@click.option(\"-b\", \"--bucket-name\", help=\"Bucket name. If not set will create magasin-?????\", default=\"\")\ndef bucket(realm, tenant, alias, ports, bucket_name):\n  \"\"\"Create a minio bucket in the tenant\"\"\"\n  click.echo(\"Create Bucket\")  \n\n  # TODO use https://min.io/docs/minio/linux/developers/python/minio-py.html\n  # May need Minio(..., cert_check=False)\n  launch_hl(realm=realm, tenant=tenant, ports=ports)\n  from time import sleep \n  sleep(1)\n  # Check if the tenant alias is set\n  if not mc.check_mc_admin_info(alias):\n    # TODO This needs to be removed if bucket is created with python library\n    click.echo(f\"minio tenant configuration alias '{alias}' not set. Try running:\", err=True)\n    click.echo(f\"      mag minio api; mc alias set {alias} http://localhost:9000 &lt;accesskey/user&gt; &lt;secretkey/password&gt; --insecure\")\n    exit(-1)\n  else: \n    click.echo(\"alias check successful\")\n  if bucket_name == \"\":\n      bucket_name = \"magasin-\" + generate_random_string(5)\n  try:\n    mc_command = f\"mc mb {alias}/{bucket_name} --insecure\"\n    click.echo(\"mc command:\" + mc_command)    \n    subprocess.run(mc_command, shell=True)\n  except Exception as e:\n    print('exception', e)\n</code></pre>"},{"location":"mag_minio/#mag_minio.cli","title":"<code>cli(ctx, verbose)</code>","text":"<p>magasin client is the glue between magasin components, it makes easier common tasks</p> Source code in <code>mag/mag.py</code> <pre><code>@click.group(cls=ClickAliasedGroup)\n@click.option('-v', '--verbose', count=True)\n@click.option('--version', is_flag=True, callback=print_version,\n              expose_value=False, is_eager=True)\n@click.pass_context\ndef cli(ctx, verbose):\n    \"\"\"magasin client is the glue between magasin components, it makes easier common tasks\"\"\"\n    ctx.ensure_object(dict)\n</code></pre>"},{"location":"mag_minio/#mag_minio.forward_port","title":"<code>forward_port(realm, component, service_name, ports, verbose=False)</code>","text":"<p>Forward ports for the specified realm, component, and service name.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>A string representing the realm.</p> required <code>component</code> <code>str</code> <p>A string representing the component.</p> required <code>service_name</code> <code>str</code> <p>(str) A string representing the service name. The service name can be obtained using kubectl get services --namespace magasin-superset).</p> required <code>ports</code> <code>str</code> <p>A string representing the ports to be forwarded (example: \"8000:8000\").</p> required <code>verbose</code> <code>bool</code> <p>A boolean indicating whether to enable verbose mode (default is False).</p> <code>False</code> <p>Returns: None</p> <p>Usage:</p> <p>forward_port(realm, component, service_name, ports, verbose)</p> <p>Example: <pre><code># Given this\nkubectl get service -n magasin-superset\nNAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nsuperset                  ClusterIP   10.100.96.47     &lt;none&gt;        8088/TCP   7d22h\n</code></pre> You can forward this service <pre><code>forward_port(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Assumes the port_forward_command function is defined elsewhere in the code.</li> <li>Uses subprocess.Popen to launch the port forwarding command in a subprocess.</li> <li>Registers the terminate_process function using atexit.register, ensuring that the port forwarding process   is terminated when the script exits.</li> </ul> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def forward_port(realm: str, component: str, service_name: str, ports: str, verbose=False) -&gt; None:\n    \"\"\"\n    Forward ports for the specified realm, component, and service name.\n\n    Args:\n        realm (str): A string representing the realm.\n        component (str): A string representing the component.\n        service_name: (str) A string representing the service name. The service name can be obtained using kubectl get services --namespace magasin-superset).\n        ports (str): A string representing the ports to be forwarded (example: \"8000:8000\").\n        verbose (bool): A boolean indicating whether to enable verbose mode (default is False).\n\n    Returns:\n    None\n\n    Usage:\n\n    forward_port(realm, component, service_name, ports, verbose)\n\n    Example:\n    ```\n    # Given this\n    kubectl get service -n magasin-superset\n    NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\n    superset                  ClusterIP   10.100.96.47     &lt;none&gt;        8088/TCP   7d22h\n    ```\n    You can forward this service\n    ```\n    forward_port(\"magasin\", \"superset\", \"superset\", \"8088:8088\")\n    ```\n\n    Notes:\n\n    - Assumes the port_forward_command function is defined elsewhere in the code.\n    - Uses subprocess.Popen to launch the port forwarding command in a subprocess.\n    - Registers the terminate_process function using atexit.register, ensuring that the port forwarding process\n      is terminated when the script exits.\n    \"\"\"\n    port_forward_command = port_forward_command_arr(\n        realm, component, service_name, ports, verbose)\n    click.echo(\"forward_port command: \" + \" \".join(port_forward_command))\n    process = subprocess.Popen(port_forward_command, shell=False)\n\n    local, _ = split_ports(ports)\n    click.echo(\"Waiting for port to be open...\")\n    if not is_port_open(host='localhost', port=local):\n        click.echo(\"Port could not be opened.\")\n        exit(-1)\n    click.echo(\"Port ready.\")\n\n    atexit.register(terminate_process, process)\n</code></pre>"},{"location":"mag_minio/#mag_minio.generate_random_string","title":"<code>generate_random_string(length=7)</code>","text":"<p>Generate a random alphanumeric lowercase string of a specified length.</p> <p>Parameters: - length (int): The desired length of the random string.</p> <p>Returns: - str: A random string containing letters (both lowercase and uppercase) and digits.</p> Source code in <code>mag/mag_core/random.py</code> <pre><code>def generate_random_string(length=7):\n    \"\"\"\n    Generate a random alphanumeric lowercase string of a specified length.\n\n    Parameters:\n    - length (int): The desired length of the random string.\n\n    Returns:\n    - str: A random string containing letters (both lowercase and uppercase) and digits.\n    \"\"\"\n    characters = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(characters) for _ in range(length))\n</code></pre>"},{"location":"mag_minio/#mag_minio.launch_ui","title":"<code>launch_ui(realm, component, service_name, ports, protocol='http', verbose=False)</code>","text":"<p>Launches the user interface for a given realm, component, and service.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The realm of the magasin instance.</p> required <code>component</code> <code>str</code> <p>The magasin component (f.i superset, daskhub, drill, ...)</p> required <code>service_name</code> <code>str</code> <p>The name of the kubernetes service to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward, using the format \"local_port:remote_port\".</p> required <code>protocol</code> <code>str</code> <p>The protocol to use (default is \"http\").</p> <code>'http'</code> <code>verbose</code> <code>bool</code> <p>Whether to display verbose output (default is False).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Nothing</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_ui(realm: str, component: str, service_name: str, ports: str, protocol: str = \"http\", verbose=False) -&gt; None:\n    \"\"\"\n    Launches the user interface for a given realm, component, and service.\n\n    Args:\n        realm (str): The realm of the magasin instance.\n        component (str): The magasin component (f.i superset, daskhub, drill, ...)\n        service_name (str): The name of the kubernetes service to forward.\n        ports (str): The ports to forward, using the format \"local_port:remote_port\".\n        protocol (str, optional): The protocol to use (default is \"http\").\n        verbose (bool, optional): Whether to display verbose output (default is False).\n\n    Returns:\n        None: Nothing\n    \"\"\"    \n    forward_port(realm=realm, component=component,\n                 service_name=service_name, ports=ports, verbose=verbose)\n\n    localhost_port, _ = split_ports(ports)\n    url = f\"{protocol}://localhost:{localhost_port}\"\n    click.echo(f\"Open browser at: {url}\")\n    click.launch(url)\n    click.echo(\"launch ui\")\n\n    try:\n        # Wait for user to press Ctrl+C\n        signal.pause()\n    except KeyboardInterrupt:\n        # Handle Ctrl+C: terminate the server and clean up\n        process.terminate()\n        os.waitpid(process.pid, 0)\n        click.echo(\"\\nServer terminated. Exiting.\")\n</code></pre>"},{"location":"mag_minio/#mag_minio.minio","title":"<code>minio(realm, tenant)</code>","text":"<p>MinIO commands</p> Source code in <code>mag_minio/minio.py</code> <pre><code>@cli.group('minio', cls=ClickAliasedGroup, aliases=[\"m\"])\n@options.realm\n@minio_options.tenant()\ndef minio(realm, tenant):\n  \"\"\"MinIO commands\"\"\"\n</code></pre>"},{"location":"mag_minio/#mag_minio.sui","title":"<code>sui(realm, tenant, ports)</code>","text":"<p>Launch user tenant ssl secured user interface</p> Source code in <code>mag_minio/minio.py</code> <pre><code>@minio.command\n@options.realm\n@options.ports(default=\"9443:9443\")\n@minio_options.tenant()\ndef sui(realm, tenant, ports):\n  \"\"\"Launch user tenant ssl secured user interface\"\"\"\n  launch_ui(realm, component=COMPONENT, service_name=f\"svc/{tenant}-console\", ports=ports, protocol=\"https\")\n</code></pre>"},{"location":"mag_minio/#mag_minio.tenant","title":"<code>tenant()</code>","text":"<p>-t, --tenant</p> Source code in <code>mag_minio/minio_options.py</code> <pre><code>def tenant():\n  \"\"\"-t, --tenant\"\"\"\n  return click.option('-t', '--tenant', default=\"myminio\", \n                     show_default=True, \n                     help='minio tenant name.', \n                     callback=validate_tenant_callback)\n</code></pre>"},{"location":"mag_minio/#mag_minio.ui","title":"<code>ui(realm, tenant, ports)</code>","text":"<p>Launch user tenant non-ssl user interface</p> Source code in <code>mag_minio/minio.py</code> <pre><code>@minio.command\n@options.realm\n@options.ports(default=\"9090:9090\")\n@minio_options.tenant()\ndef ui(realm, tenant, ports):\n  \"\"\"Launch user tenant non-ssl user interface\"\"\"\n  launch_ui(realm, component=COMPONENT, service_name=f\"svc/{tenant}-console\", ports=ports, protocol=\"http\")\n</code></pre>"},{"location":"mag_minio/#mag_minio.user","title":"<code>user(realm, tenant, ports, accesskey, secretkey)</code>","text":"<p>Create a minio user in the tenant</p> Source code in <code>mag_minio/minio.py</code> <pre><code>@add.command(aliases=[\"u\"])\n@options.realm\n@options.ports(default=\"9000:9000\")\n@minio_options.tenant()\n@click.option(\"-a\", \"--accesskey\", help=\"user name\", default=\"\")\n@click.option(\"-s\", \"--secretkey\", help=\"password\", default=\"\")\ndef user(realm, tenant, ports, accesskey, secretkey):\n  \"\"\"Create a minio user in the tenant\"\"\"\n\n  # TODO use https://min.io/docs/minio/linux/developers/python/minio-py.html\n  # May need Minio(..., cert_check=False)\n  launch_hl(realm=realm, tenant=tenant, ports=ports)\n  from time import sleep \n  sleep(1)\n  # Check if the tenant alias is set\n  if not mc.check_mc_admin_info(tenant):\n    # TODO This needs to be removed if bucket is created with python library\n    click.echo(f\"minio tenant configuration alias '{tenant}' not set. Try running:\", err=True)\n    click.echo(f\"      mag minio api; mc alias set {tenant} https://localhost:9000 &lt;accesskey/user&gt; &lt;secretkey/password&gt; --insecure\")\n    exit(-1)\n  else: \n     click.echo(f\"minio tenant ok\")\n\n  if accesskey == \"\":\n      accesskey = \"magasin-\" + generate_random_string(5)\n  if secretkey == \"\":\n      secretkey = generate_random_string(32)\n  try:\n    mc_command = f\"mc admin user add {tenant} {accesskey} {secretkey} --insecure\"\n    click.echo(\"mc command:\" + mc_command)    \n    subprocess.run(mc_command, shell=True)\n    click.echo(\"\")\n    click.echo(f\"Created\\n    user/accesskey: {accesskey}\\n    password/secretkey: {secretkey}\")\n    click.echo(f\"\\nNote: you still need to assign permissions/policies to the user. You can do it with the UI: `mag minio ui`\")\n    click.echo(\"\")\n  except Exception as e:\n    print('exception', e)\n</code></pre>"},{"location":"mag_superset/","title":"mag_superset","text":""},{"location":"mag_superset/#mag_superset.cli","title":"<code>cli(ctx, verbose)</code>","text":"<p>magasin client is the glue between magasin components, it makes easier common tasks</p> Source code in <code>mag/mag.py</code> <pre><code>@click.group(cls=ClickAliasedGroup)\n@click.option('-v', '--verbose', count=True)\n@click.option('--version', is_flag=True, callback=print_version,\n              expose_value=False, is_eager=True)\n@click.pass_context\ndef cli(ctx, verbose):\n    \"\"\"magasin client is the glue between magasin components, it makes easier common tasks\"\"\"\n    ctx.ensure_object(dict)\n</code></pre>"},{"location":"mag_superset/#mag_superset.get_namespace","title":"<code>get_namespace(component_name, realm='magasin')</code>","text":"<p>Generate a namespace based on the component name and realm.</p> <p>Parameters:</p> Name Type Description Default <code>component_name</code> <code>str</code> <p>The magasin component name (superset, daskhub, drill, ...)</p> required <code>realm</code> <code>str</code> <p>The realm. Defaults to 'magasin'.</p> <code>'magasin'</code> Example <ul> <li><code>get_namespace(\"superset\", \"magasin\")</code> -&gt; \"magasin-superset\"</li> <li><code>get_namespace(\"superset\", \"magasin-postfix\")</code> -&gt; \"magasin-superset-postfix\"</li> </ul> Reference <p>For more information about magasin realms, please see the magasin realms documentation.</p> Source code in <code>mag/mag_core/realm.py</code> <pre><code>def get_namespace(component_name: str, realm='magasin') -&gt; str:\n    \"\"\"\n    Generate a namespace based on the component name and realm.\n\n\n    Args:\n        component_name (str): The magasin component name (superset, daskhub, drill, ...)\n        realm (str, optional): The realm. Defaults to 'magasin'.\n\n    Example:\n        * `get_namespace(\"superset\", \"magasin\")` -&gt; \"magasin-superset\"\n        * `get_namespace(\"superset\", \"magasin-postfix\")` -&gt; \"magasin-superset-postfix\"\n\n    Reference:\n        For more information about magasin realms, please see the [magasin realms documentation](https://unicef.github.io/magasin/install/advanced.html#magasin-realms).\n    \"\"\"\n    prefix, suffix = split_realm(realm)\n    namespace = \"\"\n    if prefix:\n        namespace = prefix + '-' + component_name\n    if suffix:\n        namespace = namespace + \"-\" + suffix\n    return namespace\n</code></pre>"},{"location":"mag_superset/#mag_superset.launch_ui","title":"<code>launch_ui(realm, component, service_name, ports, protocol='http', verbose=False)</code>","text":"<p>Launches the user interface for a given realm, component, and service.</p> <p>Parameters:</p> Name Type Description Default <code>realm</code> <code>str</code> <p>The realm of the magasin instance.</p> required <code>component</code> <code>str</code> <p>The magasin component (f.i superset, daskhub, drill, ...)</p> required <code>service_name</code> <code>str</code> <p>The name of the kubernetes service to forward.</p> required <code>ports</code> <code>str</code> <p>The ports to forward, using the format \"local_port:remote_port\".</p> required <code>protocol</code> <code>str</code> <p>The protocol to use (default is \"http\").</p> <code>'http'</code> <code>verbose</code> <code>bool</code> <p>Whether to display verbose output (default is False).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Nothing</p> Source code in <code>mag/mag_core/launch.py</code> <pre><code>def launch_ui(realm: str, component: str, service_name: str, ports: str, protocol: str = \"http\", verbose=False) -&gt; None:\n    \"\"\"\n    Launches the user interface for a given realm, component, and service.\n\n    Args:\n        realm (str): The realm of the magasin instance.\n        component (str): The magasin component (f.i superset, daskhub, drill, ...)\n        service_name (str): The name of the kubernetes service to forward.\n        ports (str): The ports to forward, using the format \"local_port:remote_port\".\n        protocol (str, optional): The protocol to use (default is \"http\").\n        verbose (bool, optional): Whether to display verbose output (default is False).\n\n    Returns:\n        None: Nothing\n    \"\"\"    \n    forward_port(realm=realm, component=component,\n                 service_name=service_name, ports=ports, verbose=verbose)\n\n    localhost_port, _ = split_ports(ports)\n    url = f\"{protocol}://localhost:{localhost_port}\"\n    click.echo(f\"Open browser at: {url}\")\n    click.launch(url)\n    click.echo(\"launch ui\")\n\n    try:\n        # Wait for user to press Ctrl+C\n        signal.pause()\n    except KeyboardInterrupt:\n        # Handle Ctrl+C: terminate the server and clean up\n        process.terminate()\n        os.waitpid(process.pid, 0)\n        click.echo(\"\\nServer terminated. Exiting.\")\n</code></pre>"},{"location":"mag_superset/#mag_superset.superset","title":"<code>superset(realm)</code>","text":"<p>Apache Superset commands</p> Source code in <code>mag_superset/superset.py</code> <pre><code>@cli.group('superset', cls=ClickAliasedGroup, aliases=['ss'])\n@options.realm\ndef superset(realm):\n  \"\"\"Apache Superset commands\"\"\"\n\n  namespace = get_namespace(component_name=COMPONENT, realm=realm)\n  click.echo(\"namespace: \" + namespace)\n</code></pre>"},{"location":"mag_superset/#mag_superset.ui","title":"<code>ui(realm, ports)</code>","text":"<p>Launch Superset user interface</p> Source code in <code>mag_superset/superset.py</code> <pre><code>@click.command\n@options.realm\n@options.ports(default=\"8088:8088\")\ndef ui(realm, ports):\n  \"\"\"Launch Superset user interface\"\"\"\n  launch_ui(realm, component=COMPONENT, service_name=f\"service/superset\", ports=ports)\n</code></pre>"}]}